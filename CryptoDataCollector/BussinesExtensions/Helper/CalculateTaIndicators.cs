using Skender.Stock.Indicators;

namespace CryptoDataCollector.BussinesExtensions.Helper
{
    public partial class UsingTaIndicators
    {

        private IndicatorsModel CalculateTa(TAHelper ta)
        {
            #region Technical Calculation
            var model = new IndicatorsModel();
            model.SARFinalData = ta.Sar();
            model.ADFinalData = ta.Ad();
            model.AdOscFinalData = ta.AdOsc();
            model.AdxFinalData = ta.Adx();
            model.AdxrFinalData = ta.Adxr();
            model.AROONDown = ta.Aroon().AROONDown;
            model.AROONUp = ta.Aroon().AROONUp;
            model.AroonOscData = ta.AroonOsc();
            model.ATRData = ta.Atr();
            model.AvgPriceData = ta.AvgPrice();
            model.BBandUpper = ta.Bbands().BBandUpper;
            model.BBandMiddle = ta.Bbands().BBandMiddle;
            model.BBandLower = ta.Bbands().BBandLower;
            model.BopData = ta.Bop();
            model.CciData = ta.Cci();
            model.Cdl2CrowsData = ta.Cdl2Crows();
            model.Cdl3BlackCrowsData = ta.Cdl3BlackCrows();
            model.Cdl3InsideData = ta.Cdl3Inside();
            model.Cdl3LineStrikeData = ta.Cdl3LineStrike();
            model.Cdl3OutsideData = ta.Cdl3Outside();
            model.Cdl3StarsInSouthData = ta.Cdl3StarsInSouth();
            model.Cdl3WhiteSoldiersData = ta.Cdl3WhiteSoldiers();
            model.CdlAbandonedBabyData = ta.CdlAbandonedBaby();
            model.CdlAdvanceBlockData = ta.CdlAdvanceBlock();
            model.CdlBeltHoldData = ta.CdlBeltHold();
            model.CdlBreakawayData = ta.CdlBreakaway();
            model.CdlClosingMarubozuData = ta.CdlClosingMarubozu();
            model.CdlConcealBabysWallData = ta.CdlConcealBabysWall();
            model.CdlCounterAttackData = ta.CdlCounterAttack();
            model.CdlDarkCloudCoverData = ta.CdlDarkCloudCover();
            model.CdlDojiData = ta.CdlDoji();
            model.CdlDojiStarData = ta.CdlDojiStar();
            model.CdlDragonflyDojiData = ta.CdlDragonflyDoji();
            model.CdlEngulfingData = ta.CdlEngulfing();
            model.CdlEveningDojiStarData = ta.CdlEveningDojiStar();
            model.CdlEveningStarData = ta.CdlEveningStar();
            model.CdlGapSideSideWhiteData = ta.CdlGapSideSideWhite();
            model.CdlGravestoneDojiData = ta.CdlGravestoneDoji();
            model.CdlHammer = ta.CdlHammer();
            model.CdlHangingMan = ta.CdlHangingMan();
            model.CdlHarami = ta.CdlHarami();
            model.CdlHaramiCross = ta.CdlHaramiCross();
            model.CdlHighWave = ta.CdlHighWave();
            model.CdlHikkake = ta.CdlHikkake();
            model.CdlHomingPigeon = ta.CdlHomingPigeon();
            model.CdlIdentical3Crows = ta.CdlIdentical3Crows();
            model.CdlInNeck = ta.CdlInNeck();
            model.CdlInvertedHammer = ta.CdlInvertedHammer();
            model.CdlKicking = ta.CdlKicking();
            model.CdlKickingByLength = ta.CdlKickingByLength();
            model.CdlLadderBottom = ta.CdlLadderBottom();
            model.CdlLongLeggedDoji = ta.CdlLongLeggedDoji();
            model.CdlLongLine = ta.CdlLongLine();
            model.CdlMarubozu = ta.CdlMarubozu();
            model.CdlMatchingLow = ta.CdlMatchingLow();
            model.CdlMatHold = ta.CdlMatHold();
            model.CdlMorningDojiStar = ta.CdlMorningDojiStar();
            model.CdlMorningStar = ta.CdlMorningStar();
            model.CdlOnNeck = ta.CdlOnNeck();
            model.CdlPiercing = ta.CdlPiercing();
            model.CdlRickshawMan = ta.CdlRickshawMan();
            //int[] CdlRiseFalls3Methods = ta.CdlRiseFall3Methods();
            model.CdlSeparatingLines = ta.CdlSeparatingLines();
            model.CdlShootingStar = ta.CdlShootingStar();
            model.CdlShortLine = ta.CdlShortLine();
            model.CdlSpinningTop = ta.CdlSpinningTop();
            model.CdlStalledPattern = ta.CdlStalledPattern();
            model.CdlStickSandwich = ta.CdlStickSandwich();
            model.CdlTakuri = ta.CdlTakuri();
            model.CdlTasukiGap = ta.CdlTasukiGap();
            model.CdlThrusting = ta.CdlThrusting();
            model.CdlTristar = ta.CdlTristar();
            model.CdlUnique3River = ta.CdlUnique3River();
            model.CdlUpsideGap2Crows = ta.CdlUpsideGap2Crows();
            model.CdlXSideGap3Methods = ta.CdlXSideGap3Methods();
            model.Cmo = ta.Cmo();
            model.Dema = ta.Dema();
            model.DX = ta.Dx();
            model.Ema5 = ta.Ema5();
            model.Ema9 = ta.Ema9();
            model.Ema10 = ta.Ema10();
            model.Ema12 = ta.Ema12();
            model.Ema13 = ta.Ema13();
            model.Ema20 = ta.Ema20();
            model.Ema30 = ta.Ema30();
            model.Ema26 = ta.Ema26();
            model.Ema50 = ta.Ema50();
            model.Ema100 = ta.Ema100();
            model.Ema200 = ta.Ema200();
            model.Kama = ta.Kama();
            model.Macd = ta.Macd().Macd;
            model.MacdSignal = ta.Macd().MacdSignal;
            model.MacdHist = ta.Macd().MacdHist;
            model.MacdExt = ta.MacdExt().MacdExt;
            model.MacdExtSignal = ta.MacdExt().MacdExtSignal;
            model.MacdExtHist = ta.MacdExt().MacdExtHist;
            model.MacdFix = ta.MacdFix().MacdFix;
            model.MacdFixSignal = ta.MacdFix().MacdFixSignal;
            model.MacdFixHist = ta.MacdFix().MacdFixHist;
            model.Mama = ta.Mama().Mama;
            model.Fama = ta.Mama().Fama;
            model.Max = ta.Max();
            model.MaxIndex = ta.MaxIndex();
            model.MedPrice = ta.MedPrice();
            model.Mfi = ta.Mfi();
            model.MidPoint = ta.MidPoint();
            model.MidPrice = ta.MidPrice();
            model.Min = ta.Min();
            model.MinIndex = ta.MinIndex();
            model.MinusDI = ta.MinusDI();
            model.MinusDM = ta.MinusDM();
            model.Mom = ta.Mom();
            model.Natr = ta.Natr();
            model.Obv = ta.Obv();
            model.PlusDI = ta.PlusDI();
            model.PlusDM = ta.PlusDM();
            model.Ppo = ta.Ppo();
            //l.decimal[] Roc = ta.Roc();
            model.RocP = ta.RocP();
            model.RocR = ta.RocR();
            model.RocR100 = ta.RocR100();
            model.RSI = ta.Rsi();
            model.SarExt = ta.SarExt();
            model.Sma5 = ta.Sma5();
            model.Sma9 = ta.Sma9();
            model.Sma10 = ta.Sma10();
            model.Sma12 = ta.Sma12();
            model.Sma13 = ta.Sma13();
            model.Sma20 = ta.Sma20();
            model.Sma30 = ta.Sma30();
            model.Sma26 = ta.Sma26();
            model.Sma50 = ta.Sma50();
            model.Sma100 = ta.Sma100();
            model.Sma200 = ta.Sma200();
            model.StdDev = ta.StdDev();
            model.StochSlow = ta.Stoch().StochSlow;
            model.StochSlowD = ta.Stoch().StochSlowD;
            model.StochFK = ta.StochF().StochFK;
            model.StochFD = ta.StochF().StochFD;
            model.StochRsiFK = ta.StochRsi().StochRsiFK;
            model.StochRsiFD = ta.StochRsi().StochRsiFD;
            model.Sum = ta.Sum();
            model.T3 = ta.T3();
            model.Tema = ta.Tema();
            model.TRange = ta.TRange();
            model.Trima = ta.Trima();
            model.Trix = ta.Trix();
            model.Tsf = ta.Tsf();
            model.TypPrice = ta.TypPrice();
            model.UltOsc = ta.UltOsc();
            model.Var = ta.Var();
            model.WclPrice = ta.WclPrice();
            model.WillR = ta.WillR();
            model.Wma = ta.Wma();
            model.keltnerChannels = ta.KeltnerChannel().ToArray();
            model.chaikinMoneyFlows = ta.ChaikinMoneyFlow().ToArray();
            model.Donchian = ta.Donchian().ToArray();
            model.hma = ta.HMA().ToArray();
            model.AwesomeOscillators = ta.AwesomeOscillator().ToArray();
            model.UltimateOscillators = ta.UltimateOscillator().ToArray();
            model.vwaps = ta.Vwap().ToArray();
            model.ichimokus = ta.Ichimoku().ToArray();

            #endregion

            return model;
        }

    }
}
